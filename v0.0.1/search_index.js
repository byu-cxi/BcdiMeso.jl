var documenterSearchIndex = {"docs":
[{"location":"#BcdiMeso.jl-Documentation","page":"Main","title":"BcdiMeso.jl Documentation","text":"","category":"section"},{"location":"#About","page":"Main","title":"About","text":"","category":"section"},{"location":"","page":"Main","title":"Main","text":"Bragg Coherent Diffraction Imaging (BCDI) Meso (Mesoscale) implements phase retrieval for mesoscale models with stochastic gradient descent. Some of the core functionality of this project is implemented in BcdiCore.jl. Additionally, this package is part of a collection of BCDI packages consisting of BcdiAtomic.jl (an atomic scale BCDI solver), BcdiMeso.jl (a mesoscale BCDI Solver), and BcdiMulti.jl (a multiscale BCDI solver).","category":"page"},{"location":"","page":"Main","title":"Main","text":"While this package is marked as BCDI specific, the methods are more general and can be used in many phase retrieval problems. In the future, this package may be incorporated into a more general phase retrieval package.","category":"page"},{"location":"","page":"Main","title":"Main","text":"Currently, this entire package must be run with access to GPUs. This may change in the future (especially if Issues requesting it are opened), but for our research group, using GPUs is a necessity.","category":"page"},{"location":"#Installation","page":"Main","title":"Installation","text":"","category":"section"},{"location":"","page":"Main","title":"Main","text":"Currently, BcdiStrain.jl is registered in the Julia general registry and can be installed by running in the REPL package manager (]):","category":"page"},{"location":"","page":"Main","title":"Main","text":"add BcdiMeso","category":"page"},{"location":"use/#Overview","page":"Usage","title":"Overview","text":"","category":"section"},{"location":"use/","page":"Usage","title":"Usage","text":"BcdiMeso implements phase retrieval in operator-style format. This means that the multiplication (*) and power (^) operators are used to apply operators to some current state. This may look like the following:","category":"page"},{"location":"use/","page":"Usage","title":"Usage","text":"state = State(intens, gVecs, recSupport, x, y, z, rho, ux, uy, uz)\noptimizeState = OptimizeState(state, primitiveRecipLattice, numPeaks)\n\noptimizeState^100 * state","category":"page"},{"location":"use/","page":"Usage","title":"Usage","text":"This short script applies 100 stochastic gradient descent iterations iterations. This makes it easy to implement very complex recipes for phase retrieval algorithms.","category":"page"},{"location":"use/#API","page":"Usage","title":"API","text":"","category":"section"},{"location":"use/","page":"Usage","title":"Usage","text":"State(intens, gVecs, recSupport, x, y, z, rho, ux, uy, uz)\nOptimizeState(state, primitiveRecipLattice, numPeaks)","category":"page"},{"location":"use/#Main.DummyDocs.State-NTuple{10, Any}","page":"Usage","title":"Main.DummyDocs.State","text":"State(intens, gVecs, recSupport, x, y, z, rho, ux, uy, uz)\n\nCreate the reconstruction state.\n\n\n\n\n\n","category":"method"},{"location":"use/#Main.DummyDocs.OptimizeState-Tuple{Any, Any, Any}","page":"Usage","title":"Main.DummyDocs.OptimizeState","text":"OptimizeState(state, primitiveRecipLattice, numPeaks)\n\nCreate an object that performs an iteration of stochastic gradient descent.\n\n\n\n\n\n","category":"method"}]
}
