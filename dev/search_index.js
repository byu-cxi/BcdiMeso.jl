var documenterSearchIndex = {"docs":
[{"location":"main/#BcdiMeso.jl-Documentation","page":"BcdiMeso","title":"BcdiMeso.jl Documentation","text":"","category":"section"},{"location":"main/#About","page":"BcdiMeso","title":"About","text":"","category":"section"},{"location":"main/","page":"BcdiMeso","title":"BcdiMeso","text":"Bragg Coherent Diffraction Imaging (BCDI) Meso (Mesoscale) implements phase retrieval for mesoscale models with stochastic gradient descent. Some of the core functionality of this project is implemented in BcdiCore.jl. Additionally, this package is part of a collection of BCDI packages consisting of BcdiAtomic.jl (an atomic scale BCDI solver), BcdiMeso.jl (a mesoscale BCDI Solver), and BcdiMulti.jl (a multiscale BCDI solver).","category":"page"},{"location":"main/","page":"BcdiMeso","title":"BcdiMeso","text":"While this package is marked as BCDI specific, the methods are more general and can be used in many phase retrieval problems. In the future, this package may be incorporated into a more general phase retrieval package.","category":"page"},{"location":"main/","page":"BcdiMeso","title":"BcdiMeso","text":"Currently, this entire package must be run with access to GPUs. This may change in the future (especially if Issues requesting it are opened), but for our research group, using GPUs is a necessity.","category":"page"},{"location":"main/#Installation","page":"BcdiMeso","title":"Installation","text":"","category":"section"},{"location":"main/","page":"BcdiMeso","title":"BcdiMeso","text":"Currently, BcdiStrain.jl is registered in the Julia general registry and can be installed by running in the REPL package manager (]):","category":"page"},{"location":"main/","page":"BcdiMeso","title":"BcdiMeso","text":"add BcdiMeso","category":"page"},{"location":"#Julia-BCDI-Documentation","page":"BCDI","title":"Julia BCDI Documentation","text":"","category":"section"},{"location":"#About","page":"BCDI","title":"About","text":"","category":"section"},{"location":"","page":"BCDI","title":"BCDI","text":"The BYU-CXI research group maintains a suite of Julia packages to solve the Bragg Coherent Diffraction Imaging (BCDI) problem in several different regimes and circumstance. ","category":"page"},{"location":"","page":"BCDI","title":"BCDI","text":"BcdiCore.jl implements all of the Fourier transforms for the Julia BCDI packages. In addition, BcdiCore calculates the loss function used (either L_2 or the MLE estimator) and derivatives of these loss functions.\nBcdiTrad.jl implements projection-based BCDI algorithm. Currently, this is limited to ER, HIO, and shrinkwrap. \nBcdiStrain.jl implements a multi-peak BCDI algorithm developed by the BYU-CXI group. In addition to the alogrithms present in BcdiTrad, BcdiStrain also implements Mount, an operator that switches between peaks.\nBcdiMeso.jl implements a BCDI algorithm that solves in the mesoscale regime. Instead of using projections, this algorithm uses a gradient-based optimization scheme. Additionally, BcdiMeso does not assume a small measurement distance away from the peak.\nBcdiAtomic.jl is an upcoming BCDI package that implements a BCDI algorithm that solves at the atomic scale.\nBcdiMulti.jl is an upcoming BCDI package that implements a multiscale BCDI algorithm that solves at both the mesoscale and the atomic scale.\nBcdiSimulate.jl is an upcoming BCDI package that simulates the BCDI problem. Currently, this is only implimented at the atomic scale.","category":"page"},{"location":"use/#Overview","page":"Usage","title":"Overview","text":"","category":"section"},{"location":"use/","page":"Usage","title":"Usage","text":"BcdiMeso implements phase retrieval in operator-style format. This means that the multiplication (*) and power (^) operators are used to apply operators to some current state. This may look like the following:","category":"page"},{"location":"use/","page":"Usage","title":"Usage","text":"state = State(intens, gVecs, recSupport, x, y, z, rho, ux, uy, uz)\noptimizeState = OptimizeState(state, primitiveRecipLattice, numPeaks)\n\noptimizeState^100 * state","category":"page"},{"location":"use/","page":"Usage","title":"Usage","text":"This short script applies 100 stochastic gradient descent iterations iterations. This makes it easy to implement very complex recipes for phase retrieval algorithms.","category":"page"},{"location":"use/#API","page":"Usage","title":"API","text":"","category":"section"},{"location":"use/","page":"Usage","title":"Usage","text":"State(intens, gVecs, recSupport, x, y, z, rho, ux, uy, uz)\nOptimizeState(state, primitiveRecipLattice, numPeaks)","category":"page"},{"location":"use/#Main.DummyDocs.State-NTuple{10, Any}","page":"Usage","title":"Main.DummyDocs.State","text":"State(intens, gVecs, recSupport, x, y, z, rho, ux, uy, uz)\n\nCreate the reconstruction state.\n\n\n\n\n\n","category":"method"},{"location":"use/#Main.DummyDocs.OptimizeState-Tuple{Any, Any, Any}","page":"Usage","title":"Main.DummyDocs.OptimizeState","text":"OptimizeState(state, primitiveRecipLattice, numPeaks)\n\nCreate an object that performs an iteration of stochastic gradient descent.\n\n\n\n\n\n","category":"method"}]
}
